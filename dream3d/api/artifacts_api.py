# coding: utf-8

"""
    dream3d

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated
from typing import overload, Optional, Union, Awaitable

from pydantic import StrictInt, StrictStr

from typing import Any, List, Optional

from dream3d.models.artifact import Artifact
from dream3d.models.artifact_type import ArtifactType
from dream3d.models.artifact_update import ArtifactUpdate
from dream3d.models.image import Image
from dream3d.models.project import Project
from dream3d.models.render_payload import RenderPayload

from dream3d.api_client import ApiClient
from dream3d.api_response import ApiResponse
from dream3d.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ArtifactsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @overload
    async def get_all_api_v1_artifacts_project_project_id_get(self, project_id : StrictStr, skip : Optional[StrictInt] = None, limit : Optional[StrictInt] = None, type : Optional[ArtifactType] = None, **kwargs) -> List[Artifact]:  # noqa: E501
        ...

    @overload
    def get_all_api_v1_artifacts_project_project_id_get(self, project_id : StrictStr, skip : Optional[StrictInt] = None, limit : Optional[StrictInt] = None, type : Optional[ArtifactType] = None, async_req: Optional[bool]=True, **kwargs) -> List[Artifact]:  # noqa: E501
        ...

    @validate_arguments
    def get_all_api_v1_artifacts_project_project_id_get(self, project_id : StrictStr, skip : Optional[StrictInt] = None, limit : Optional[StrictInt] = None, type : Optional[ArtifactType] = None, async_req: Optional[bool]=None, **kwargs) -> Union[List[Artifact], Awaitable[List[Artifact]]]:  # noqa: E501
        """Get All  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_all_api_v1_artifacts_project_project_id_get(project_id, skip, limit, type, async_req=True)
        >>> result = thread.get()

        :param project_id: (required)
        :type project_id: str
        :param skip:
        :type skip: int
        :param limit:
        :type limit: int
        :param type:
        :type type: ArtifactType
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[Artifact]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_all_api_v1_artifacts_project_project_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.get_all_api_v1_artifacts_project_project_id_get_with_http_info(project_id, skip, limit, type, **kwargs)  # noqa: E501

    @validate_arguments
    def get_all_api_v1_artifacts_project_project_id_get_with_http_info(self, project_id : StrictStr, skip : Optional[StrictInt] = None, limit : Optional[StrictInt] = None, type : Optional[ArtifactType] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get All  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_all_api_v1_artifacts_project_project_id_get_with_http_info(project_id, skip, limit, type, async_req=True)
        >>> result = thread.get()

        :param project_id: (required)
        :type project_id: str
        :param skip:
        :type skip: int
        :param limit:
        :type limit: int
        :param type:
        :type type: ArtifactType
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[Artifact], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'project_id',
            'skip',
            'limit',
            'type'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_api_v1_artifacts_project_project_id_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['project_id']:
            _path_params['project_id'] = _params['project_id']


        # process the query parameters
        _query_params = []
        if _params.get('skip') is not None:  # noqa: E501
            _query_params.append(('skip', _params['skip']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('type') is not None:  # noqa: E501
            _query_params.append(('type', _params['type'].value))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        _response_types_map = {
            '200': "List[Artifact]",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v1/artifacts/project/{project_id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def get_api_v1_artifacts_artifact_id_get(self, artifact_id : StrictStr, **kwargs) -> Artifact:  # noqa: E501
        ...

    @overload
    def get_api_v1_artifacts_artifact_id_get(self, artifact_id : StrictStr, async_req: Optional[bool]=True, **kwargs) -> Artifact:  # noqa: E501
        ...

    @validate_arguments
    def get_api_v1_artifacts_artifact_id_get(self, artifact_id : StrictStr, async_req: Optional[bool]=None, **kwargs) -> Union[Artifact, Awaitable[Artifact]]:  # noqa: E501
        """Get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_api_v1_artifacts_artifact_id_get(artifact_id, async_req=True)
        >>> result = thread.get()

        :param artifact_id: (required)
        :type artifact_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Artifact
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_api_v1_artifacts_artifact_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.get_api_v1_artifacts_artifact_id_get_with_http_info(artifact_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_api_v1_artifacts_artifact_id_get_with_http_info(self, artifact_id : StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """Get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_api_v1_artifacts_artifact_id_get_with_http_info(artifact_id, async_req=True)
        >>> result = thread.get()

        :param artifact_id: (required)
        :type artifact_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Artifact, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'artifact_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_artifacts_artifact_id_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['artifact_id']:
            _path_params['artifact_id'] = _params['artifact_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        _response_types_map = {
            '200': "Artifact",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v1/artifacts/{artifact_id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def get_children_artifacts_api_v1_artifacts_project_project_id_parent_id_get(self, project_id : StrictStr, parent_id : StrictStr, skip : Optional[StrictInt] = None, limit : Optional[StrictInt] = None, type : Optional[ArtifactType] = None, **kwargs) -> List[Artifact]:  # noqa: E501
        ...

    @overload
    def get_children_artifacts_api_v1_artifacts_project_project_id_parent_id_get(self, project_id : StrictStr, parent_id : StrictStr, skip : Optional[StrictInt] = None, limit : Optional[StrictInt] = None, type : Optional[ArtifactType] = None, async_req: Optional[bool]=True, **kwargs) -> List[Artifact]:  # noqa: E501
        ...

    @validate_arguments
    def get_children_artifacts_api_v1_artifacts_project_project_id_parent_id_get(self, project_id : StrictStr, parent_id : StrictStr, skip : Optional[StrictInt] = None, limit : Optional[StrictInt] = None, type : Optional[ArtifactType] = None, async_req: Optional[bool]=None, **kwargs) -> Union[List[Artifact], Awaitable[List[Artifact]]]:  # noqa: E501
        """Get Children Artifacts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_children_artifacts_api_v1_artifacts_project_project_id_parent_id_get(project_id, parent_id, skip, limit, type, async_req=True)
        >>> result = thread.get()

        :param project_id: (required)
        :type project_id: str
        :param parent_id: (required)
        :type parent_id: str
        :param skip:
        :type skip: int
        :param limit:
        :type limit: int
        :param type:
        :type type: ArtifactType
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[Artifact]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_children_artifacts_api_v1_artifacts_project_project_id_parent_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.get_children_artifacts_api_v1_artifacts_project_project_id_parent_id_get_with_http_info(project_id, parent_id, skip, limit, type, **kwargs)  # noqa: E501

    @validate_arguments
    def get_children_artifacts_api_v1_artifacts_project_project_id_parent_id_get_with_http_info(self, project_id : StrictStr, parent_id : StrictStr, skip : Optional[StrictInt] = None, limit : Optional[StrictInt] = None, type : Optional[ArtifactType] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Children Artifacts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_children_artifacts_api_v1_artifacts_project_project_id_parent_id_get_with_http_info(project_id, parent_id, skip, limit, type, async_req=True)
        >>> result = thread.get()

        :param project_id: (required)
        :type project_id: str
        :param parent_id: (required)
        :type parent_id: str
        :param skip:
        :type skip: int
        :param limit:
        :type limit: int
        :param type:
        :type type: ArtifactType
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[Artifact], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'project_id',
            'parent_id',
            'skip',
            'limit',
            'type'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_children_artifacts_api_v1_artifacts_project_project_id_parent_id_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['project_id']:
            _path_params['project_id'] = _params['project_id']

        if _params['parent_id']:
            _path_params['parent_id'] = _params['parent_id']


        # process the query parameters
        _query_params = []
        if _params.get('skip') is not None:  # noqa: E501
            _query_params.append(('skip', _params['skip']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('type') is not None:  # noqa: E501
            _query_params.append(('type', _params['type'].value))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        _response_types_map = {
            '200': "List[Artifact]",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v1/artifacts/project/{project_id}/{parent_id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def get_feed_api_v1_artifacts_feed_get(self, skip : Optional[StrictInt] = None, limit : Optional[StrictInt] = None, **kwargs) -> List[Artifact]:  # noqa: E501
        ...

    @overload
    def get_feed_api_v1_artifacts_feed_get(self, skip : Optional[StrictInt] = None, limit : Optional[StrictInt] = None, async_req: Optional[bool]=True, **kwargs) -> List[Artifact]:  # noqa: E501
        ...

    @validate_arguments
    def get_feed_api_v1_artifacts_feed_get(self, skip : Optional[StrictInt] = None, limit : Optional[StrictInt] = None, async_req: Optional[bool]=None, **kwargs) -> Union[List[Artifact], Awaitable[List[Artifact]]]:  # noqa: E501
        """Get Feed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_feed_api_v1_artifacts_feed_get(skip, limit, async_req=True)
        >>> result = thread.get()

        :param skip:
        :type skip: int
        :param limit:
        :type limit: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[Artifact]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_feed_api_v1_artifacts_feed_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.get_feed_api_v1_artifacts_feed_get_with_http_info(skip, limit, **kwargs)  # noqa: E501

    @validate_arguments
    def get_feed_api_v1_artifacts_feed_get_with_http_info(self, skip : Optional[StrictInt] = None, limit : Optional[StrictInt] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Feed  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_feed_api_v1_artifacts_feed_get_with_http_info(skip, limit, async_req=True)
        >>> result = thread.get()

        :param skip:
        :type skip: int
        :param limit:
        :type limit: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[Artifact], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'skip',
            'limit'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_feed_api_v1_artifacts_feed_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('skip') is not None:  # noqa: E501
            _query_params.append(('skip', _params['skip']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        _response_types_map = {
            '200': "List[Artifact]",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v1/artifacts/feed', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def get_opengraph_url_api_v1_artifacts_artifact_id_og_get(self, artifact_id : StrictStr, **kwargs) -> Image:  # noqa: E501
        ...

    @overload
    def get_opengraph_url_api_v1_artifacts_artifact_id_og_get(self, artifact_id : StrictStr, async_req: Optional[bool]=True, **kwargs) -> Image:  # noqa: E501
        ...

    @validate_arguments
    def get_opengraph_url_api_v1_artifacts_artifact_id_og_get(self, artifact_id : StrictStr, async_req: Optional[bool]=None, **kwargs) -> Union[Image, Awaitable[Image]]:  # noqa: E501
        """Get Opengraph Url  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_opengraph_url_api_v1_artifacts_artifact_id_og_get(artifact_id, async_req=True)
        >>> result = thread.get()

        :param artifact_id: (required)
        :type artifact_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Image
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_opengraph_url_api_v1_artifacts_artifact_id_og_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.get_opengraph_url_api_v1_artifacts_artifact_id_og_get_with_http_info(artifact_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_opengraph_url_api_v1_artifacts_artifact_id_og_get_with_http_info(self, artifact_id : StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Opengraph Url  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_opengraph_url_api_v1_artifacts_artifact_id_og_get_with_http_info(artifact_id, async_req=True)
        >>> result = thread.get()

        :param artifact_id: (required)
        :type artifact_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Image, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'artifact_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_opengraph_url_api_v1_artifacts_artifact_id_og_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['artifact_id']:
            _path_params['artifact_id'] = _params['artifact_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "Image",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v1/artifacts/{artifact_id}/og', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def get_public_url_api_v1_artifacts_artifact_id_public_get(self, artifact_id : StrictStr, **kwargs) -> object:  # noqa: E501
        ...

    @overload
    def get_public_url_api_v1_artifacts_artifact_id_public_get(self, artifact_id : StrictStr, async_req: Optional[bool]=True, **kwargs) -> object:  # noqa: E501
        ...

    @validate_arguments
    def get_public_url_api_v1_artifacts_artifact_id_public_get(self, artifact_id : StrictStr, async_req: Optional[bool]=None, **kwargs) -> Union[object, Awaitable[object]]:  # noqa: E501
        """Get Public Url  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_public_url_api_v1_artifacts_artifact_id_public_get(artifact_id, async_req=True)
        >>> result = thread.get()

        :param artifact_id: (required)
        :type artifact_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_public_url_api_v1_artifacts_artifact_id_public_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.get_public_url_api_v1_artifacts_artifact_id_public_get_with_http_info(artifact_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_public_url_api_v1_artifacts_artifact_id_public_get_with_http_info(self, artifact_id : StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Public Url  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_public_url_api_v1_artifacts_artifact_id_public_get_with_http_info(artifact_id, async_req=True)
        >>> result = thread.get()

        :param artifact_id: (required)
        :type artifact_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'artifact_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_public_url_api_v1_artifacts_artifact_id_public_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['artifact_id']:
            _path_params['artifact_id'] = _params['artifact_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "object",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v1/artifacts/{artifact_id}/public', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def get_templates_api_v1_artifacts_templates_get(self, skip : Optional[StrictInt] = None, limit : Optional[StrictInt] = None, **kwargs) -> List[Artifact]:  # noqa: E501
        ...

    @overload
    def get_templates_api_v1_artifacts_templates_get(self, skip : Optional[StrictInt] = None, limit : Optional[StrictInt] = None, async_req: Optional[bool]=True, **kwargs) -> List[Artifact]:  # noqa: E501
        ...

    @validate_arguments
    def get_templates_api_v1_artifacts_templates_get(self, skip : Optional[StrictInt] = None, limit : Optional[StrictInt] = None, async_req: Optional[bool]=None, **kwargs) -> Union[List[Artifact], Awaitable[List[Artifact]]]:  # noqa: E501
        """Get Templates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_templates_api_v1_artifacts_templates_get(skip, limit, async_req=True)
        >>> result = thread.get()

        :param skip:
        :type skip: int
        :param limit:
        :type limit: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[Artifact]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_templates_api_v1_artifacts_templates_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.get_templates_api_v1_artifacts_templates_get_with_http_info(skip, limit, **kwargs)  # noqa: E501

    @validate_arguments
    def get_templates_api_v1_artifacts_templates_get_with_http_info(self, skip : Optional[StrictInt] = None, limit : Optional[StrictInt] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Templates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_templates_api_v1_artifacts_templates_get_with_http_info(skip, limit, async_req=True)
        >>> result = thread.get()

        :param skip:
        :type skip: int
        :param limit:
        :type limit: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[Artifact], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'skip',
            'limit'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_templates_api_v1_artifacts_templates_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('skip') is not None:  # noqa: E501
            _query_params.append(('skip', _params['skip']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        _response_types_map = {
            '200': "List[Artifact]",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v1/artifacts/templates', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def get_url_api_v1_artifacts_artifact_id_url_get(self, artifact_id : StrictStr, **kwargs) -> Image:  # noqa: E501
        ...

    @overload
    def get_url_api_v1_artifacts_artifact_id_url_get(self, artifact_id : StrictStr, async_req: Optional[bool]=True, **kwargs) -> Image:  # noqa: E501
        ...

    @validate_arguments
    def get_url_api_v1_artifacts_artifact_id_url_get(self, artifact_id : StrictStr, async_req: Optional[bool]=None, **kwargs) -> Union[Image, Awaitable[Image]]:  # noqa: E501
        """Get Url  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_url_api_v1_artifacts_artifact_id_url_get(artifact_id, async_req=True)
        >>> result = thread.get()

        :param artifact_id: (required)
        :type artifact_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Image
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the get_url_api_v1_artifacts_artifact_id_url_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.get_url_api_v1_artifacts_artifact_id_url_get_with_http_info(artifact_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_url_api_v1_artifacts_artifact_id_url_get_with_http_info(self, artifact_id : StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Url  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_url_api_v1_artifacts_artifact_id_url_get_with_http_info(artifact_id, async_req=True)
        >>> result = thread.get()

        :param artifact_id: (required)
        :type artifact_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Image, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'artifact_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_url_api_v1_artifacts_artifact_id_url_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['artifact_id']:
            _path_params['artifact_id'] = _params['artifact_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        _response_types_map = {
            '200': "Image",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v1/artifacts/{artifact_id}/url', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def like_api_v1_artifacts_artifact_id_like_put(self, artifact_id : StrictStr, **kwargs) -> Artifact:  # noqa: E501
        ...

    @overload
    def like_api_v1_artifacts_artifact_id_like_put(self, artifact_id : StrictStr, async_req: Optional[bool]=True, **kwargs) -> Artifact:  # noqa: E501
        ...

    @validate_arguments
    def like_api_v1_artifacts_artifact_id_like_put(self, artifact_id : StrictStr, async_req: Optional[bool]=None, **kwargs) -> Union[Artifact, Awaitable[Artifact]]:  # noqa: E501
        """Like  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.like_api_v1_artifacts_artifact_id_like_put(artifact_id, async_req=True)
        >>> result = thread.get()

        :param artifact_id: (required)
        :type artifact_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Artifact
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the like_api_v1_artifacts_artifact_id_like_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.like_api_v1_artifacts_artifact_id_like_put_with_http_info(artifact_id, **kwargs)  # noqa: E501

    @validate_arguments
    def like_api_v1_artifacts_artifact_id_like_put_with_http_info(self, artifact_id : StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """Like  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.like_api_v1_artifacts_artifact_id_like_put_with_http_info(artifact_id, async_req=True)
        >>> result = thread.get()

        :param artifact_id: (required)
        :type artifact_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Artifact, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'artifact_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method like_api_v1_artifacts_artifact_id_like_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['artifact_id']:
            _path_params['artifact_id'] = _params['artifact_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        _response_types_map = {
            '200': "Artifact",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v1/artifacts/{artifact_id}/like', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def record_view_api_v1_artifacts_artifact_id_view_post(self, artifact_id : StrictStr, **kwargs) -> Artifact:  # noqa: E501
        ...

    @overload
    def record_view_api_v1_artifacts_artifact_id_view_post(self, artifact_id : StrictStr, async_req: Optional[bool]=True, **kwargs) -> Artifact:  # noqa: E501
        ...

    @validate_arguments
    def record_view_api_v1_artifacts_artifact_id_view_post(self, artifact_id : StrictStr, async_req: Optional[bool]=None, **kwargs) -> Union[Artifact, Awaitable[Artifact]]:  # noqa: E501
        """Record View  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.record_view_api_v1_artifacts_artifact_id_view_post(artifact_id, async_req=True)
        >>> result = thread.get()

        :param artifact_id: (required)
        :type artifact_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Artifact
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the record_view_api_v1_artifacts_artifact_id_view_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.record_view_api_v1_artifacts_artifact_id_view_post_with_http_info(artifact_id, **kwargs)  # noqa: E501

    @validate_arguments
    def record_view_api_v1_artifacts_artifact_id_view_post_with_http_info(self, artifact_id : StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """Record View  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.record_view_api_v1_artifacts_artifact_id_view_post_with_http_info(artifact_id, async_req=True)
        >>> result = thread.get()

        :param artifact_id: (required)
        :type artifact_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Artifact, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'artifact_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method record_view_api_v1_artifacts_artifact_id_view_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['artifact_id']:
            _path_params['artifact_id'] = _params['artifact_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        _response_types_map = {
            '200': "Artifact",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v1/artifacts/{artifact_id}/view', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def remix_api_v1_artifacts_artifact_id_remix_post(self, artifact_id : StrictStr, **kwargs) -> Project:  # noqa: E501
        ...

    @overload
    def remix_api_v1_artifacts_artifact_id_remix_post(self, artifact_id : StrictStr, async_req: Optional[bool]=True, **kwargs) -> Project:  # noqa: E501
        ...

    @validate_arguments
    def remix_api_v1_artifacts_artifact_id_remix_post(self, artifact_id : StrictStr, async_req: Optional[bool]=None, **kwargs) -> Union[Project, Awaitable[Project]]:  # noqa: E501
        """Remix  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remix_api_v1_artifacts_artifact_id_remix_post(artifact_id, async_req=True)
        >>> result = thread.get()

        :param artifact_id: (required)
        :type artifact_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Project
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the remix_api_v1_artifacts_artifact_id_remix_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.remix_api_v1_artifacts_artifact_id_remix_post_with_http_info(artifact_id, **kwargs)  # noqa: E501

    @validate_arguments
    def remix_api_v1_artifacts_artifact_id_remix_post_with_http_info(self, artifact_id : StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """Remix  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remix_api_v1_artifacts_artifact_id_remix_post_with_http_info(artifact_id, async_req=True)
        >>> result = thread.get()

        :param artifact_id: (required)
        :type artifact_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Project, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'artifact_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remix_api_v1_artifacts_artifact_id_remix_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['artifact_id']:
            _path_params['artifact_id'] = _params['artifact_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        _response_types_map = {
            '200': "Project",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v1/artifacts/{artifact_id}/remix', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def toggle_like_api_v1_artifacts_artifact_id_toggle_like_put(self, artifact_id : StrictStr, **kwargs) -> Artifact:  # noqa: E501
        ...

    @overload
    def toggle_like_api_v1_artifacts_artifact_id_toggle_like_put(self, artifact_id : StrictStr, async_req: Optional[bool]=True, **kwargs) -> Artifact:  # noqa: E501
        ...

    @validate_arguments
    def toggle_like_api_v1_artifacts_artifact_id_toggle_like_put(self, artifact_id : StrictStr, async_req: Optional[bool]=None, **kwargs) -> Union[Artifact, Awaitable[Artifact]]:  # noqa: E501
        """Toggle Like  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.toggle_like_api_v1_artifacts_artifact_id_toggle_like_put(artifact_id, async_req=True)
        >>> result = thread.get()

        :param artifact_id: (required)
        :type artifact_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Artifact
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the toggle_like_api_v1_artifacts_artifact_id_toggle_like_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.toggle_like_api_v1_artifacts_artifact_id_toggle_like_put_with_http_info(artifact_id, **kwargs)  # noqa: E501

    @validate_arguments
    def toggle_like_api_v1_artifacts_artifact_id_toggle_like_put_with_http_info(self, artifact_id : StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """Toggle Like  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.toggle_like_api_v1_artifacts_artifact_id_toggle_like_put_with_http_info(artifact_id, async_req=True)
        >>> result = thread.get()

        :param artifact_id: (required)
        :type artifact_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Artifact, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'artifact_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method toggle_like_api_v1_artifacts_artifact_id_toggle_like_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['artifact_id']:
            _path_params['artifact_id'] = _params['artifact_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        _response_types_map = {
            '200': "Artifact",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v1/artifacts/{artifact_id}/toggle-like', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def unlike_api_v1_artifacts_artifact_id_unlike_put(self, artifact_id : StrictStr, **kwargs) -> Artifact:  # noqa: E501
        ...

    @overload
    def unlike_api_v1_artifacts_artifact_id_unlike_put(self, artifact_id : StrictStr, async_req: Optional[bool]=True, **kwargs) -> Artifact:  # noqa: E501
        ...

    @validate_arguments
    def unlike_api_v1_artifacts_artifact_id_unlike_put(self, artifact_id : StrictStr, async_req: Optional[bool]=None, **kwargs) -> Union[Artifact, Awaitable[Artifact]]:  # noqa: E501
        """Unlike  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.unlike_api_v1_artifacts_artifact_id_unlike_put(artifact_id, async_req=True)
        >>> result = thread.get()

        :param artifact_id: (required)
        :type artifact_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Artifact
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the unlike_api_v1_artifacts_artifact_id_unlike_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.unlike_api_v1_artifacts_artifact_id_unlike_put_with_http_info(artifact_id, **kwargs)  # noqa: E501

    @validate_arguments
    def unlike_api_v1_artifacts_artifact_id_unlike_put_with_http_info(self, artifact_id : StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """Unlike  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.unlike_api_v1_artifacts_artifact_id_unlike_put_with_http_info(artifact_id, async_req=True)
        >>> result = thread.get()

        :param artifact_id: (required)
        :type artifact_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Artifact, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'artifact_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unlike_api_v1_artifacts_artifact_id_unlike_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['artifact_id']:
            _path_params['artifact_id'] = _params['artifact_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        _response_types_map = {
            '200': "Artifact",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v1/artifacts/{artifact_id}/unlike', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def update_api_v1_artifacts_artifact_id_put(self, artifact_id : StrictStr, artifact_update : ArtifactUpdate, **kwargs) -> Artifact:  # noqa: E501
        ...

    @overload
    def update_api_v1_artifacts_artifact_id_put(self, artifact_id : StrictStr, artifact_update : ArtifactUpdate, async_req: Optional[bool]=True, **kwargs) -> Artifact:  # noqa: E501
        ...

    @validate_arguments
    def update_api_v1_artifacts_artifact_id_put(self, artifact_id : StrictStr, artifact_update : ArtifactUpdate, async_req: Optional[bool]=None, **kwargs) -> Union[Artifact, Awaitable[Artifact]]:  # noqa: E501
        """Update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_api_v1_artifacts_artifact_id_put(artifact_id, artifact_update, async_req=True)
        >>> result = thread.get()

        :param artifact_id: (required)
        :type artifact_id: str
        :param artifact_update: (required)
        :type artifact_update: ArtifactUpdate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Artifact
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the update_api_v1_artifacts_artifact_id_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.update_api_v1_artifacts_artifact_id_put_with_http_info(artifact_id, artifact_update, **kwargs)  # noqa: E501

    @validate_arguments
    def update_api_v1_artifacts_artifact_id_put_with_http_info(self, artifact_id : StrictStr, artifact_update : ArtifactUpdate, **kwargs) -> ApiResponse:  # noqa: E501
        """Update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_api_v1_artifacts_artifact_id_put_with_http_info(artifact_id, artifact_update, async_req=True)
        >>> result = thread.get()

        :param artifact_id: (required)
        :type artifact_id: str
        :param artifact_update: (required)
        :type artifact_update: ArtifactUpdate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Artifact, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'artifact_id',
            'artifact_update'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_api_v1_artifacts_artifact_id_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['artifact_id']:
            _path_params['artifact_id'] = _params['artifact_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['artifact_update'] is not None:
            _body_params = _params['artifact_update']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        _response_types_map = {
            '200': "Artifact",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v1/artifacts/{artifact_id}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @overload
    async def upscale_api_v1_artifacts_artifact_id_upscale_post(self, artifact_id : StrictStr, render_payload : RenderPayload, **kwargs) -> Artifact:  # noqa: E501
        ...

    @overload
    def upscale_api_v1_artifacts_artifact_id_upscale_post(self, artifact_id : StrictStr, render_payload : RenderPayload, async_req: Optional[bool]=True, **kwargs) -> Artifact:  # noqa: E501
        ...

    @validate_arguments
    def upscale_api_v1_artifacts_artifact_id_upscale_post(self, artifact_id : StrictStr, render_payload : RenderPayload, async_req: Optional[bool]=None, **kwargs) -> Union[Artifact, Awaitable[Artifact]]:  # noqa: E501
        """Upscale  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.upscale_api_v1_artifacts_artifact_id_upscale_post(artifact_id, render_payload, async_req=True)
        >>> result = thread.get()

        :param artifact_id: (required)
        :type artifact_id: str
        :param render_payload: (required)
        :type render_payload: RenderPayload
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Artifact
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the upscale_api_v1_artifacts_artifact_id_upscale_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        if async_req is not None:
            kwargs['async_req'] = async_req
        return self.upscale_api_v1_artifacts_artifact_id_upscale_post_with_http_info(artifact_id, render_payload, **kwargs)  # noqa: E501

    @validate_arguments
    def upscale_api_v1_artifacts_artifact_id_upscale_post_with_http_info(self, artifact_id : StrictStr, render_payload : RenderPayload, **kwargs) -> ApiResponse:  # noqa: E501
        """Upscale  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.upscale_api_v1_artifacts_artifact_id_upscale_post_with_http_info(artifact_id, render_payload, async_req=True)
        >>> result = thread.get()

        :param artifact_id: (required)
        :type artifact_id: str
        :param render_payload: (required)
        :type render_payload: RenderPayload
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Artifact, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'artifact_id',
            'render_payload'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upscale_api_v1_artifacts_artifact_id_upscale_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['artifact_id']:
            _path_params['artifact_id'] = _params['artifact_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['render_payload'] is not None:
            _body_params = _params['render_payload']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        _response_types_map = {
            '200': "Artifact",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/api/v1/artifacts/{artifact_id}/upscale', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
