# coding: utf-8

"""
    dream3d

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt
from dream3d.models.color_tex import ColorTex
from dream3d.models.flags import Flags
from dream3d.models.metalness_tex import MetalnessTex
from dream3d.models.normal_tex import NormalTex
from dream3d.models.roughness_tex import RoughnessTex

class MaterialProperties(BaseModel):
    """
    MaterialProperties
    """
    color: Optional[Any] = None
    color_tex: Optional[ColorTex] = None
    roughness: Optional[Union[StrictFloat, StrictInt]] = 0.0
    roughness_tex: Optional[RoughnessTex] = None
    metalness: Optional[Union[StrictFloat, StrictInt]] = 0.0
    metalness_tex: Optional[MetalnessTex] = None
    normal_tex: Optional[NormalTex] = None
    normaltilt_iar: Optional[Union[StrictFloat, StrictInt]] = 1.0
    specular: Optional[Union[StrictFloat, StrictInt]] = 0.0
    albedo_color: Optional[Any] = None
    subsurface_color: Optional[Any] = None
    radiation_length: Optional[Union[StrictFloat, StrictInt]] = 0.0
    light_emission: Optional[Union[StrictFloat, StrictInt]] = 0.0
    refraction_index: Optional[Any] = None
    flags: Optional[Flags] = None
    __properties = ["color", "color_tex", "roughness", "roughness_tex", "metalness", "metalness_tex", "normal_tex", "normaltilt_iar", "specular", "albedo_color", "subsurface_color", "radiation_length", "light_emission", "refraction_index", "flags"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MaterialProperties:
        """Create an instance of MaterialProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of color_tex
        if self.color_tex:
            _dict['color_tex'] = self.color_tex.to_dict()
        # override the default output from pydantic by calling `to_dict()` of roughness_tex
        if self.roughness_tex:
            _dict['roughness_tex'] = self.roughness_tex.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metalness_tex
        if self.metalness_tex:
            _dict['metalness_tex'] = self.metalness_tex.to_dict()
        # override the default output from pydantic by calling `to_dict()` of normal_tex
        if self.normal_tex:
            _dict['normal_tex'] = self.normal_tex.to_dict()
        # override the default output from pydantic by calling `to_dict()` of flags
        if self.flags:
            _dict['flags'] = self.flags.to_dict()
        # set to None if color (nullable) is None
        # and __fields_set__ contains the field
        if self.color is None and "color" in self.__fields_set__:
            _dict['color'] = None

        # set to None if albedo_color (nullable) is None
        # and __fields_set__ contains the field
        if self.albedo_color is None and "albedo_color" in self.__fields_set__:
            _dict['albedo_color'] = None

        # set to None if subsurface_color (nullable) is None
        # and __fields_set__ contains the field
        if self.subsurface_color is None and "subsurface_color" in self.__fields_set__:
            _dict['subsurface_color'] = None

        # set to None if refraction_index (nullable) is None
        # and __fields_set__ contains the field
        if self.refraction_index is None and "refraction_index" in self.__fields_set__:
            _dict['refraction_index'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MaterialProperties:
        """Create an instance of MaterialProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MaterialProperties.parse_obj(obj)

        _obj = MaterialProperties.parse_obj({
            "color": obj.get("color"),
            "color_tex": ColorTex.from_dict(obj.get("color_tex")) if obj.get("color_tex") is not None else None,
            "roughness": obj.get("roughness") if obj.get("roughness") is not None else 0.0,
            "roughness_tex": RoughnessTex.from_dict(obj.get("roughness_tex")) if obj.get("roughness_tex") is not None else None,
            "metalness": obj.get("metalness") if obj.get("metalness") is not None else 0.0,
            "metalness_tex": MetalnessTex.from_dict(obj.get("metalness_tex")) if obj.get("metalness_tex") is not None else None,
            "normal_tex": NormalTex.from_dict(obj.get("normal_tex")) if obj.get("normal_tex") is not None else None,
            "normaltilt_iar": obj.get("normaltilt_iar") if obj.get("normaltilt_iar") is not None else 1.0,
            "specular": obj.get("specular") if obj.get("specular") is not None else 0.0,
            "albedo_color": obj.get("albedo_color"),
            "subsurface_color": obj.get("subsurface_color"),
            "radiation_length": obj.get("radiation_length") if obj.get("radiation_length") is not None else 0.0,
            "light_emission": obj.get("light_emission") if obj.get("light_emission") is not None else 0.0,
            "refraction_index": obj.get("refraction_index"),
            "flags": Flags.from_dict(obj.get("flags")) if obj.get("flags") is not None else None
        })
        return _obj

