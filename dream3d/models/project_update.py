# coding: utf-8

"""
    dream3d

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from dream3d.models.render_payload import RenderPayload

class ProjectUpdate(BaseModel):
    """
    ProjectUpdate
    """
    name: Optional[StrictStr] = None
    owner_id: Optional[StrictInt] = None
    s3_uri: Optional[StrictStr] = None
    preview_uri: Optional[StrictStr] = None
    edited_at: Optional[datetime] = None
    latest_artifact_id: Optional[StrictStr] = None
    public: Optional[StrictBool] = None
    payload: Optional[RenderPayload] = None
    is_new: Optional[StrictBool] = False
    __properties = ["name", "owner_id", "s3_uri", "preview_uri", "edited_at", "latest_artifact_id", "public", "payload", "is_new"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProjectUpdate:
        """Create an instance of ProjectUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of payload
        if self.payload:
            _dict['payload'] = self.payload.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProjectUpdate:
        """Create an instance of ProjectUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ProjectUpdate.parse_obj(obj)

        _obj = ProjectUpdate.parse_obj({
            "name": obj.get("name"),
            "owner_id": obj.get("owner_id"),
            "s3_uri": obj.get("s3_uri"),
            "preview_uri": obj.get("preview_uri"),
            "edited_at": obj.get("edited_at"),
            "latest_artifact_id": obj.get("latest_artifact_id"),
            "public": obj.get("public"),
            "payload": RenderPayload.from_dict(obj.get("payload")) if obj.get("payload") is not None else None,
            "is_new": obj.get("is_new") if obj.get("is_new") is not None else False
        })
        return _obj

