# coding: utf-8

"""
    dream3d

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from dream3d.models.material_type import MaterialType

class Material(BaseModel):
    """
    Material
    """
    name: Optional[StrictStr] = None
    type: MaterialType = Field(...)
    public: Optional[StrictBool] = None
    creator_id: Optional[StrictInt] = None
    id: StrictStr = Field(...)
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    color_map_url: Optional[StrictStr] = None
    __properties = ["name", "type", "public", "creator_id", "id", "created_at", "updated_at", "color_map_url"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Material:
        """Create an instance of Material from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Material:
        """Create an instance of Material from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Material.parse_obj(obj)

        _obj = Material.parse_obj({
            "name": obj.get("name"),
            "type": obj.get("type"),
            "public": obj.get("public"),
            "creator_id": obj.get("creator_id"),
            "id": obj.get("id"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "color_map_url": obj.get("color_map_url")
        })
        return _obj

