# coding: utf-8

"""
    dream3d

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from dream3d.models.artifact_status import ArtifactStatus
from dream3d.models.artifact_type import ArtifactType
from dream3d.models.related_user import RelatedUser
from dream3d.models.render_payload import RenderPayload

class Artifact(BaseModel):
    """
    Artifact
    """
    id: Optional[StrictStr] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    title: StrictStr = Field(...)
    public: Optional[StrictBool] = None
    status: Optional[ArtifactStatus] = None
    type: Optional[ArtifactType] = None
    views: Optional[StrictInt] = None
    project_id: Optional[StrictStr] = None
    parent_id: Optional[StrictStr] = None
    is_template: Optional[StrictBool] = None
    payload: Optional[RenderPayload] = None
    user_id: StrictInt = Field(...)
    prompt: Optional[StrictStr] = None
    url: Optional[StrictStr] = None
    url_4x: Optional[StrictStr] = None
    task_id: Optional[StrictStr] = None
    likes: Optional[StrictInt] = None
    user: RelatedUser = Field(...)
    liked: Optional[StrictBool] = None
    upscaled: Optional[StrictBool] = False
    __properties = ["id", "created_at", "updated_at", "title", "public", "status", "type", "views", "project_id", "parent_id", "is_template", "payload", "user_id", "prompt", "url", "url_4x", "task_id", "likes", "user", "liked", "upscaled"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Artifact:
        """Create an instance of Artifact from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of payload
        if self.payload:
            _dict['payload'] = self.payload.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Artifact:
        """Create an instance of Artifact from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Artifact.parse_obj(obj)

        _obj = Artifact.parse_obj({
            "id": obj.get("id"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "title": obj.get("title"),
            "public": obj.get("public"),
            "status": obj.get("status"),
            "type": obj.get("type"),
            "views": obj.get("views"),
            "project_id": obj.get("project_id"),
            "parent_id": obj.get("parent_id"),
            "is_template": obj.get("is_template"),
            "payload": RenderPayload.from_dict(obj.get("payload")) if obj.get("payload") is not None else None,
            "user_id": obj.get("user_id"),
            "prompt": obj.get("prompt"),
            "url": obj.get("url"),
            "url_4x": obj.get("url_4x"),
            "task_id": obj.get("task_id"),
            "likes": obj.get("likes"),
            "user": RelatedUser.from_dict(obj.get("user")) if obj.get("user") is not None else None,
            "liked": obj.get("liked"),
            "upscaled": obj.get("upscaled") if obj.get("upscaled") is not None else False
        })
        return _obj

