# coding: utf-8

"""
    dream3d

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist
from dream3d.models.geometry_type import GeometryType
from dream3d.models.material_preset import MaterialPreset
from dream3d.models.material_properties import MaterialProperties
from dream3d.models.material_shader import MaterialShader

class D3DObject(BaseModel):
    """
    D3DObject
    """
    id: StrictStr = Field(...)
    geometry: GeometryType = Field(...)
    position: conlist(Union[StrictFloat, StrictInt]) = Field(...)
    scale: conlist(Union[StrictFloat, StrictInt]) = Field(...)
    scale_linked: Optional[StrictBool] = True
    rotation: conlist(Union[StrictFloat, StrictInt]) = Field(...)
    color: StrictStr = Field(...)
    matrix_world: Optional[conlist(Union[StrictFloat, StrictInt])] = None
    prompt: Optional[StrictStr] = None
    mesh_id: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    mesh_url: Optional[StrictStr] = None
    args: Optional[conlist(Union[StrictFloat, StrictInt])] = None
    visible: Optional[StrictBool] = True
    url: Optional[StrictStr] = None
    root_id: Optional[StrictStr] = None
    parent_id: Optional[StrictStr] = None
    children: Optional[conlist(StrictStr)] = None
    material_strength: Optional[Union[StrictFloat, StrictInt]] = 0.0
    detail_strength: Optional[Union[StrictFloat, StrictInt]] = 1.0
    material_id: Optional[StrictStr] = None
    material_preset: Optional[MaterialPreset] = None
    material_shader: Optional[MaterialShader] = None
    material_properties: Optional[MaterialProperties] = None
    __properties = ["id", "geometry", "position", "scale", "scale_linked", "rotation", "color", "matrix_world", "prompt", "mesh_id", "description", "mesh_url", "args", "visible", "url", "root_id", "parent_id", "children", "material_strength", "detail_strength", "material_id", "material_preset", "material_shader", "material_properties"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> D3DObject:
        """Create an instance of D3DObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of material_properties
        if self.material_properties:
            _dict['material_properties'] = self.material_properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> D3DObject:
        """Create an instance of D3DObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return D3DObject.parse_obj(obj)

        _obj = D3DObject.parse_obj({
            "id": obj.get("id"),
            "geometry": obj.get("geometry"),
            "position": obj.get("position"),
            "scale": obj.get("scale"),
            "scale_linked": obj.get("scale_linked") if obj.get("scale_linked") is not None else True,
            "rotation": obj.get("rotation"),
            "color": obj.get("color"),
            "matrix_world": obj.get("matrix_world"),
            "prompt": obj.get("prompt"),
            "mesh_id": obj.get("mesh_id"),
            "description": obj.get("description"),
            "mesh_url": obj.get("mesh_url"),
            "args": obj.get("args"),
            "visible": obj.get("visible") if obj.get("visible") is not None else True,
            "url": obj.get("url"),
            "root_id": obj.get("root_id"),
            "parent_id": obj.get("parent_id"),
            "children": obj.get("children"),
            "material_strength": obj.get("material_strength") if obj.get("material_strength") is not None else 0.0,
            "detail_strength": obj.get("detail_strength") if obj.get("detail_strength") is not None else 1.0,
            "material_id": obj.get("material_id"),
            "material_preset": obj.get("material_preset"),
            "material_shader": obj.get("material_shader"),
            "material_properties": MaterialProperties.from_dict(obj.get("material_properties")) if obj.get("material_properties") is not None else None
        })
        return _obj

