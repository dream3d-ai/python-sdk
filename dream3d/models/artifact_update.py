# coding: utf-8

"""
    dream3d

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from dream3d.models.artifact_status import ArtifactStatus
from dream3d.models.artifact_type import ArtifactType
from dream3d.models.render_payload import RenderPayload

class ArtifactUpdate(BaseModel):
    """
    ArtifactUpdate
    """
    title: Optional[StrictStr] = None
    public: Optional[StrictBool] = None
    status: Optional[ArtifactStatus] = None
    type: Optional[ArtifactType] = None
    views: Optional[StrictInt] = None
    project_id: Optional[StrictStr] = None
    parent_id: Optional[StrictStr] = None
    is_template: Optional[StrictBool] = None
    payload: Optional[RenderPayload] = None
    __properties = ["title", "public", "status", "type", "views", "project_id", "parent_id", "is_template", "payload"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ArtifactUpdate:
        """Create an instance of ArtifactUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of payload
        if self.payload:
            _dict['payload'] = self.payload.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ArtifactUpdate:
        """Create an instance of ArtifactUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ArtifactUpdate.parse_obj(obj)

        _obj = ArtifactUpdate.parse_obj({
            "title": obj.get("title"),
            "public": obj.get("public"),
            "status": obj.get("status"),
            "type": obj.get("type"),
            "views": obj.get("views"),
            "project_id": obj.get("project_id"),
            "parent_id": obj.get("parent_id"),
            "is_template": obj.get("is_template"),
            "payload": RenderPayload.from_dict(obj.get("payload")) if obj.get("payload") is not None else None
        })
        return _obj

