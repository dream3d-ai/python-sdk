# coding: utf-8

"""
    dream3d

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional
from pydantic import BaseModel, conlist
from dream3d.models.camera import Camera
from dream3d.models.d3_d_object import D3DObject
from dream3d.models.hdri import HDRI
from dream3d.models.light import Light

class Scene(BaseModel):
    """
    Scene
    """
    objects: Optional[Dict[str, D3DObject]] = None
    lights: Optional[conlist(Light)] = None
    camera: Optional[Camera] = None
    hdri: Optional[HDRI] = None
    __properties = ["objects", "lights", "camera", "hdri"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Scene:
        """Create an instance of Scene from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in objects (dict)
        _field_dict = {}
        if self.objects:
            for _key in self.objects:
                if self.objects[_key]:
                    _field_dict[_key] = self.objects[_key].to_dict()
            _dict['objects'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each item in lights (list)
        _items = []
        if self.lights:
            for _item in self.lights:
                if _item:
                    _items.append(_item.to_dict())
            _dict['lights'] = _items
        # override the default output from pydantic by calling `to_dict()` of camera
        if self.camera:
            _dict['camera'] = self.camera.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Scene:
        """Create an instance of Scene from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Scene.parse_obj(obj)

        _obj = Scene.parse_obj({
            "objects": dict(
                (_k, D3DObject.from_dict(_v))
                for _k, _v in obj.get("objects").items()
            )
            if obj.get("objects") is not None
            else None,
            "lights": [Light.from_dict(_item) for _item in obj.get("lights")] if obj.get("lights") is not None else None,
            "camera": Camera.from_dict(obj.get("camera")) if obj.get("camera") is not None else None,
            "hdri": obj.get("hdri")
        })
        return _obj

